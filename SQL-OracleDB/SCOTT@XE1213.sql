-- DQL (Data Query Language, 데이터 질의어) : SELELCT문
SELECT * FROM DEPT;
SELECT DEPTNO, DNAME FROM DEPT;

-- DML (Data Manuplation Language, 데이터 조작어) : INSERT, UPDATE, DELETE
INSERT INTO DEPT VALUES (60, '총무부', '서울');  --데이터 추가
UPDATE DEPT SET LOC='부산' WHERE DNAME='총무부'; --데이터 수정
DELETE FROM DEPT WHERE DEPTNO=60; --데이터 삭제

-- DDL(Data Definition Language, 데이터 정의어) : CREATE, ALTER, DROP, RENAME, TRUNCATE
DESC DEPT01;
DROP TABLE DEPT02;
CREATE TABLE DEPT01(
    DEPTNO NUMBER(4),
    DNAME VARCHAR2(10),
    LOC VARCHAR2(9)
);

SELECT * FROM DEPT01;
INSERT INTO DEPT02 VALUES(10, '개발부', '서울');

ALTER TABLE DEPT01
MODIFY(DNAME VARCHAR2(30));

RENAME DEPT01 TO DEPT02;
DESC DEPT02;

TRUNCATE TABLE DEPT02; --TRUNCATE = DELETE + CUMMIT

-- ORACLE NULL = 값이 미확정 혹은 모르는 값
-- 3 + ?(NULL) = ?(NULL)
-- NVL(NULL VALUE) 함수는 NULL은 0 또는 다른 값으로 변환하기 위해 사용한다.
SELECT SAL, COMM, SAL*12+NVL(COMM,0) AS "연봉" FROM EMP;

-- || (Concatenation, 연결자)
SELECT ENAME, JOB FROM EMP;
SELECT ENAME || ' IS A ' || JOB FROM EMP;

-- DISTINCT 키워드 : 동일한 값을 한번만 출력해준다.
SELECT DISTINCT DEPTNO FROM EMP; 
---------------------------------------------------------------------------------
--4장
--SELECT문에서 WHERE 조건
SELECT * FROM EMP
WHERE SAL >= 3000; --3000이상

SELECT EMPNO, ENAME, SAL FROM EMP
WHERE SAL != 3000; --3000이 아닌 나머지
--WHERE SAL <> 3000;
--WHERE SAL ^= 3000;

-- 문자 데이터 조회
DESC EMP;
SELECT EMPNO, ENAME "이름", SAL"월급"
FROM EMP
WHERE ENAME = 'FORD';
--WHERE ENAME = 'ford'; --대소문자 구분


-- 날짜 데이터 조회
SELECT * FROM EMP
WHERE HIREDATE <= '82/01/01'; --82년1월1일 이전에 입사한 사람들

-- 논리 연산자 : AND, OR, NOT
SELECT * 
FROM EMP
WHERE DEPTNO=10 
AND JOB='MANAGER';

SELECT * 
FROM EMP
WHERE DEPTNO=10 
OR JOB='MANAGER';

SELECT * 
FROM EMP
--WHERE NOT DEPTNO=10;
WHERE DEPTNO!=10;

-- BETWEEN AND 연산자
SELECT * 
FROM EMP
--WHERE SAL>=2000 AND SAL<=3000; -- 2000<=SAL<=3000
WHERE SAL BETWEEN 2000 AND 3000; -- 2000<=SAL<=3000

SELECT * 
FROM EMP
WHERE HIREDATE 
BETWEEN '1987/01/01' AND '1987/12/31';

-- IN 연산자
SELECT * 
FROM EMP
--WHERE COMM=300 OR COMM=500 OR COMM=1400;
WHERE COMM IN(300, 500, 1400);

SELECT * 
FROM EMP
--WHERE COMM<>300 AND COMM<>500 AND COMM<>1400;
WHERE COMM NOT IN(300, 500, 1400);

-- LIKE 연산자와 와일드카드(%,_)
-- % : 문자가 없거나, 하나 이상의 문자가 어떤 값이 와도 상관없다.
-- _ : 하나의 문자가 어떤 값이 와도 상관없다.
SELECT *
FROM EMP
WHERE ENAME LIKE 'F%'; --ENAME이 F부터 시작해서 뒤에는 상관없는 경우

SELECT *
FROM EMP
WHERE ENAME LIKE '%A%'; --ENAME 중간에 A가 있고 앞뒤는 상관없는 경우

SELECT *
FROM EMP
WHERE ENAME LIKE '%N'; --ENAME 마지막에 N이 있고 앞에는 상관없이 오는 경우

SELECT *
FROM EMP
WHERE ENAME LIKE '_A%'; --2번째 자리가 A인 경우

SELECT *
FROM EMP
WHERE ENAME LIKE '__A%'; --3번째 자리가 A인 경우

SELECT *
FROM EMP
WHERE ENAME NOT LIKE '%A%'; --A가 들어가지 않는 경우

-- NULL을 위한 연산자
SELECT * 
FROM EMP
--WHERE COMM=NULL; --구문오류 
--WHERE COMM IS NULL; --COMM이 NULL인경우
WHERE COMM IS NOT NULL; --COMM이 NULL이 아닌 경우

--정렬을 위한 ORDER BY 절
SELECT *
FROM EMP
--ORDER BY SAL ASC; --SAL기준으로 오름차순
ORDER BY SAL DESC; --SAL기준으로 내림차순

SELECT *
FROM EMP
ORDER BY ENAME; --ENAME기준으로 오름차순

SELECT *
FROM EMP
ORDER BY HIREDATE DESC; --HIREDATE기준으로 내림차순

SELECT *
FROM EMP
ORDER BY SAL DESC, ENAME ASC; --SAL기준 내림차순이면서, ENAME을 오름차순으로

-- DUAL 테이블 : 산술연산의 결과를 한 줄로 얻기 위해서 사용한다.
SELECT * FROM DUAL;
SELECT 24*60 FROM EMP;
SELECT 24*60 FROM DUAL;
SELECT SYSDATE FROM DUAL; --현재 날짜

-- 숫자 함수
SELECT -10, ABS(-10) FROM DUAL; -- ABS함수 : 절대값
SELECT 34.5678, FLOOR(34.5678) FROM DUAL;   --FLOOR : 소수점 아래를 잘라낸다.(버림)
SELECT FLOOR(34.5678) FROM DUAL;
SELECT 34.5678, ROUND(34.5678) FROM DUAL; --ROUND : 특정 자릿수에서 반올림한다.
SELECT 34.5678, ROUND(34.5678,2) FROM DUAL;
SELECT 34.5678, ROUND(34.5678,-1) FROM DUAL;
SELECT TRUNC(34.5678), TRUNC(34.5678, -1),TRUNC(34.5678) FROM DUAL; --특정 자릿수에서 잘라낸다. (버림)
SELECT MOD(27,2), MOD(27,5), MOD(27,7) FROM DUAL; --MOD : 입력 받은 수를 나눈 나머지 값을 반환한다.
SELECT 'Welcom to Oracle', UPPER('Welcom to Oracle') FROM DUAL;
SELECT 'Welcom to Oracle', LOWER('Welcom to Oracle') FROM DUAL;
SELECT 'WELCOM TO CANADA', LOWER('WELCOM TO CANADA') FROM DUAL;
SELECT LOWER('WELCOM TO CANADA') FROM DUAL;
SELECT 'WELCOME TO ORACLE', INITCAP('WELCOME TO ORACLE')FROM DUAL;
SELECT LENGTH('ORACLE'), LENGTH('오라클') FROM DUAL; --LENGTH : 문자열 길이
SELECT LENGTHB('ORACLE'), LENGTHB('A오라클') FROM DUAL; --LENGTHB : 문자열 바이트 길이 (UTF-8:가변형문자셋)
SELECT SUBSTR('WELCOME TO ORACLE', 4, 3) FROM DUAL; --4번째 글자부터 3개 출력
SELECT INSTR('WELCOME TO ORACLE', 'O') FROM DUAL; --첫번째 O의 위치
SELECT INSTR('WELCOME TO ORACLE', 'ORACLE') FROM DUAL;
SELECT INSTR('데이터베이스', '이', 3, 1), INSTRB('데이터베이스','이',3,1) FROM DUAL; 

-- 여백함수 : LPAD, RPAD
SELECT LPAD('ORACLE', 20, ' ') FROM DUAL; --전체20글자중 왼쪽에 공백 오른쪽에 문자열
SELECT RPAD('ORACLE', 20, '#') FROM DUAL; --전체20글자중 왼쪽에 문자열 오른쪽에 #

-- 여백삭제 함수 : LTRIM, RTRIM
SELECT LTRIM('  ORACLE   ') FROM DUAL; --왼쪽 여백 삭제
SELECT RTRIM('  ORACLE   ') FROM DUAL; --오른쪽 여백 삭제
SELECT TRIM('A' FROM  'AAAORACLEAAA') FROM DUAL;  --

-- 날짜 함수 : SYSDATE
SELECT SYSDATE FROM DUAL;
SELECT SYSDATE-1 "어제", SYSDATE "오늘", SYSDATE+1"내일" FROM DUAL;

-- 반올림 함수 : ROUND
SELECT HIREDATE, ROUND(HIREDATE, 'MONTH') FROM EMP; --15일기준



-- 5.5 형변환 함수 : TO_CHAR, TO_DATE, TO_NUMBER
-- 문자형으로 변환 : TO_CHAR
-- DATE -> CHAR 
SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM DUAL;
-- NUMBER -> CHAR
SELECT TO_CHAR(123456,'0000000000'), TO_CHAR(123456,'999,999,999,999') FROM DUAL;

-- 날짜형으로 변환 : TO_DATE
-- NUMBER -> DATE
SELECT ENAME, HIREDATE FROM EMP
WHERE HIREDATE=TO_DATE(19810220,'YYYYMMDD');
-- CHAR -> DATE
SELECT TRUNC(SYSDATE - TO_DATE('2022/11/02', 'YYYY/MM/DD')) FROM DUAL;

-- 숫자형으로 변환 : TO_NUMBER
-- CHAR -> NUMBER
SELECT TO_NUMBER('20,000', '99,999') - TO_NUMBER('10,000', '99,999') FROM DUAL;

CREATE TABLE TESTTIME (
    REGDATE DATE
);
SELECT * FROM TESTTIME;
DESC TESTTIME;
INSERT INTO TESTTIME VALUES('2022/12/13'); -- O
INSERT INTO TESTTIME VALUES(2022/12/13);   -- X
INSERT INTO TESTTIME VALUES(SYSDATE);      -- O
SELECT * FROM TESTTIME;
SELECT TO_CHAR(REGDATE, 'YY-MM-DD HH24:MI:SS') FROM TESTTIME;


-- NULL을 다른값으로 변환 : NVL
SELECT ENAME, SAL, COMM, SAL*12+COMM, NVL(COMM,0), SAL*12+NVL(COMM,0) FROM EMP;

-- DECODE : JAVA의 SWITCH문과 같다.
SELECT ENAME, DEPTNO,DECODE(DEPTNO, 10, 'ACCOUNTING',
                                    20, 'RESEARCH',
                                    30, 'SALES',
                                    40, 'OPERATIONS' ) AS DNAME
FROM EMP;

-- CASE WHEN : IF-ELSE문과 유사
SELECT ENAME, DEPTNO,  CASE WHEN DEPTNO=10 THEN 'ACCOUNTING'
                            WHEN DEPTNO=20 THEN 'RESEARCH'
                            WHEN DEPTNO=30 THEN 'SALES'
                            WHEN DEPTNO=40 THEN 'OPERATIONS'
                        END AS DNAME
FROM EMP;
SELECT ENAME, NVL(TO_CHAR(MGR), 'CEO') FROM EMP;
SELECT HIREDATE, TO_CHAR(HIREDATE, 'YYYY/MM/DD') FROM EMP;