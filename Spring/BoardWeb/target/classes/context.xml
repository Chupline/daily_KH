<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">


    <!-- lab begin -->
    <!-- 어노테이션 기반 설정-->
    <!-- 패키지를 뒤져서 @Component 와 -->
    <!-- context:component-scan base-package="패키지명"
    : 패키지내의 컴포넌트를 스캔하여 객체를 자동으로 생성-->
    <!-- @Component:패키지 내 클래스와 자동 맵핑 -->

   <!-- <context:component-scan base-package="polymorphism"></context:component-scan>-->



    <!--bean 사용 : 객체를 만들어서 컨테이너에 넣는방식-->
    <!-- 컨테이너에서 "tv" 객체를 구현 -->
   <!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype" lazy-init="true"
          init-method="initMethod" destroy-method="destoryMethod">
        &lt;!&ndash;<constructor-arg ref="sony"></constructor-arg>&ndash;&gt;
        &lt;!&ndash;  index를 생략하면 default index="0" &ndash;&gt;
        &lt;!&ndash;
        <constructor-arg index="0" ref="apple"/>
        <constructor-arg index="1" value="270000"/>
        <property name="speaker" ref="apple"></property>
        <property name="price" value="27000000"></property>
        &ndash;&gt;
    </bean>-->

    <!-- p네임 스페이스
     : Setter 인젝션을 설정할 때, p 네임스페이스를 이용하면 좀 더 효율적으로 의존성 주입을 처리할 수 있다.-->
    <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="apple" p:price="28000"/>
    <bean id="sony" class="polymorphism.SonySpeaker"></bean>
    <bean id="apple" class="polymorphism.AppleSpeaker"></bean>

    <!--
    <bean> 엘리먼트 속성
    init-method : 컨테이너가 구동하면서 객체 초기화하면서 처리하는 임의의 메소드 지정할 수 있다.
    destroy-method : 스프링 컨테이너가 객체를 삭제하기 직전에 호출될 임의의 메소드를 지정할 수 있다.
    lazy-init : 컨테이너가 구동되는 시점이 아닌 해당 <bean>이 사용되는 시점에 객체를 생성할 수 있다.
    scope : scope 속성값은 기본이 싱글톤, 일반적으로 생략하므로 스프링 컨테이너가 관리하는 <bean>들은 대부분 싱글톤으로 운영된다.
    scope 속성을 "prototype"으로 지정하면 해당 <bean>이 요청될 때마다 매번 새로운 객체를 생성하여 반환한다.

    constructor-arg : 컨테이너가 기본 생성자 말고 매개변수를 가지는 다른 생성자를 호출하도록 설정
    -->

    <!-- <bean id="tv" class="polymorphism.SamsungTV"> <constructor-arg index="0"
        ref="apple"></constructor-arg> <constructor-arg index="1" value="27000000"></constructor-arg>
        <property name="speaker" ref="sony"></property> <property name="price" value="27000000"></property>
        </bean> -->

    <!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="apple"
        p:price="28000" init-method="initMethod" lazy-init="true"/> -->

    <!--
    <bean id="sony" class="polymorphism.SonySpeaker"></bean>
    <bean id="apple" class="polymorphism.AppleSpeaker"></bean>
    <context:component-scan
        base-package="polymorphism" />
    <bean id="collectionBean"
        class="com.springbook.ioc.injection.CollectionBean">
        <property name="addressList">
            <list>
                <value>서울시 강남구 역상동</value>
                <value>서울시	성동구 행당동</value>
            </list>
        </property>
    </bean> -->
    <!-- lab end -->

</beans>


