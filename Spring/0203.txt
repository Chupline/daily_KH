[ 스프링 컨테이너의 동작 순서 ]
1. TVUser 클라이언트가 스프링 설정 파일을 로딩하여 컨테이너 구동
2. 스프링 설정 파일에 <bean> 등록된 SamsungTV 객체 생성
3. getBean() 메소드로 이름이 'tv'인 객체를 요청(Lookup)
4. SamsungTV 객체 반환


GenericXmlApplicationContext 
 : 파일 시스템이나 클래스 경로에 있는 XML 설정 파일을 로딩하여 구동하는 컨테이너
XmlWebApplicationContext 
 : 웹 기반의 스프링 애플리케이션을 개발할 때 사용하는 컨테이너


싱글톤 패턴 : 객체가 하나만 생성하도록 클래스를 설계
class ClassName {
    // 2. 자신타입의 필드에 객체를 생성해서 대입해 놓는다.
    private static ClassName singleton = new ClassName(); 
    // 1. 생성자를 접근제한시켜 다른클래스에서 객체를 생성하지 못하게 한다.
    private ClassName() {}
    // 3. 외부에서 객체를 접근할 수 있도록 getter생성
    public static ClassName getSingleton() { 
	return singleton;
    }
}


의존성 관리 방법
Dependency Lookup : 컨테이너가 생성한 객체를 검색하여 사용하는 방식
Dependency Injection: 컨테이너가 자동으로 처리해 주는 방식 (스프링 설정 파일에 정보 등록)